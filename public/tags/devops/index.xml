<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DevOps on Radek Padrta</title>
    <link>http://localhost:52531/tags/devops/</link>
    <description>Recent content in DevOps on Radek Padrta</description>
    <image>
      <url>http://localhost:52531/cloudhammer.svg</url>
      <link>http://localhost:52531/cloudhammer.svg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 19 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:52531/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PR Automation</title>
      <link>http://localhost:52531/zet/articles/pr-automation/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:52531/zet/articles/pr-automation/</guid>
      <description>We have a couple of codes in one repository, each creates a web application. We need to create the web app with an environment that will be short-lived, allowing someone to test the app within short time period.
We want to automate the process, and one way to do that is to build the solution through a Pull Request.
Why through Pull Request? Imagine you created an application or just some feature in your app.</description>
      <content:encoded><![CDATA[<p>We have a couple of codes in one repository, each creates a web application. We need to create the web app with an environment that will be short-lived, allowing someone to test the app within short time period.</p>
<p>We want to automate the process, and one way to do that is to build the solution through a Pull Request.</p>
<h2 id="why-through-pull-request">Why through Pull Request?</h2>
<p>Imagine you created an application or just some feature in your app. You don’t want to push it to the production environment, but rather to a short-lived environment, to ensure that everything is okay and to decide if you can merge the PR request, for example, to the main branch. The short-lived environment provides us with a space to test the application.</p>
<h2 id="how-it-works">How it works?</h2>
<p>A user on GitHub will open a Pull Request. They will then choose which application they want to build (remember, we have multiple applications/features in one repository). The user selects the option they want to build, for example, Variant2.</p>
<h4 id="how-can-the-user-choose-which-app">How can the user choose which app?</h4>
<p>In the PR, there are labels. We have created a label named Variant2. If the user selects this label and opens the PR, it will trigger the pipeline, and many things will be triggered. We will discuss this in more detail later, but first, let’s talk about our possibilities.</p>
<h3 id="what-are-our-options">What are our options?</h3>
<p>There are three types I&rsquo;m working on. There may be more options, and I would be really glad to hear your thoughts about it.</p>
<p>Our case: We have code in GitHub.
My testing includes the following:</p>
<ul>
<li>Web App - Azure DevOps</li>
<li>Static Web App - Azure DevOps</li>
<li>Static Web App - GitHub Actions</li>
</ul>
<p>Let&rsquo;s discuss each, how it works at a high level, and the pros and cons.</p>
<h2 id="web-app---azure-devops">Web App - Azure DevOps</h2>
<p>We opened the PR. We didn&rsquo;t select a label. Should the pipeline be triggered? No.
Why is it not triggered? Because we are using a webhook, and we defined what will trigger it. In our case, it is when a label is added.</p>
<p><img loading="lazy" src="/PRAUT_WebhookTrigger.png" type="" alt=""  /></p>
<p>You might be wondering, what if we select a different label?
For this, we have a pipeline with many conditions that check what is needed and what is already set.</p>
<p>Here is a visualization of the flow.
<img loading="lazy" src="/PRAUT_WA.png" type="" alt=""  /></p>
<p>I will not dive into the solution, or I would be writing about it for hours. The solution is in <a href="https://github.com/radekpadrta/PRAutomation/blob/main/azure-pipelines-pr-open.yml">azure-pipelines-pr-open.yml</a>. You can check it there and you will find other pipeline there.</p>
<h5 id="what-is-cool-about-this-solution">What is cool about this solution?</h5>
<p>You can manage everything and have full control over your build. You can trigger comments for your developers, letting them know what is happening in the pipeline while they wait for the short-lived environment. It’s a flexible solution and, in my opinion, this approach is best for larger applications because it allows you to simulate everything needed in Azure. We are not just creating the Web App, we are also creating the container image, setting policies, and managing RBAC for each Web App. No need to use any tokens&hellip;everything is done through CLI and managed identity.</p>
<h5 id="what-is-bad">What is bad?</h5>
<p>You need to pay for the service plan, create additional components, and the pipeline can become larger and harder to maintain with changes. You also need to implement lifecycle management. If you want to use a web app, you need to create a container for your code and wait for boot-up until your app is ready. Typically, this takes about 6-9 minutes, even when using very basic code.</p>
<h2 id="static-web-app---azure-devops">Static Web App - Azure DevOps</h2>
<p>The trigger is the same as above. We are using a Static Web App, which means we don’t need as much in the pipeline as for a Web App. All we need is the Static Web App.</p>
<p><img loading="lazy" src="/PRAUT_SWA.png" type="" alt=""  /></p>
<h5 id="what-is-cool">What is cool?</h5>
<p>You can create preview environments and configure them as needed. For example, you can create two or three apps in one PR by selecting two or three labels, and it is cheaper than using a Web App.</p>
<h5 id="what-is-bad-1">What is bad?</h5>
<p>It is similarly challenging to set up as a Web App and hard to maintain if there are changes.</p>
<h2 id="static-web-app---github-actions">Static Web App - GitHub Actions</h2>
<p>You need to set up the connection between the Static Web App and GitHub. You can follow this guide to do that: <a href="https://github.com/radekpadrta/PRAutomation/tree/testPR">How to conenct SWA with GitHub</a></p>
<p>Once you set the connection, a pipeline for GitHub Actions will be automatically created in your repository.</p>
<p>This automatically created pipeline is not ideal for our use case, but if we make it prettier, it can be very useful!</p>
<p>The udpated pipeline can be found <a href="https://github.com/radekpadrta/PRAutomation/blob/main/.github/workflows/azure-static-web-apps-black-hill-01e38be0f.yml">here</a></p>
<p>We don’t need to worry about webhooks or payloads, and we don’t use any conditions. Everything is handled in a different way, which we don&rsquo;t see.</p>
<p>The only things we need to configure is how to get the URL of the preview environment and how to choose which app we want to build.</p>
<h5 id="what-is-cool-1">What is cool?</h5>
<p>If the code is in GitHub, it’s easy to set up Actions, understand, and maintain. One PR = One App. I working now on how to make it more flexible, so hopefully, in the next post, there will be some progress. But overall, it&rsquo;s best solution.</p>
<h5 id="what-is-bad-2">What is bad?</h5>
<p>We don’t work with the payload, making it difficult to create flexible tasks. Additionally, we don’t see what is happening in GitHub Actions, for example when it sends information to users.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you have a lot of time, want to be sure everything is set up according to your needs, and you have money, go for the Web App.</p>
<p>If you have some time, and already Azure set for your Web App environments, and want to test the solution and discard it without incurring high costs, choose the Static Web App.</p>
<p>If you want an easy solution, don’t want to spend much time on it, and don’t need a highly flexible setup, go with the Static Web App using GitHub Actions.</p>
<h4 id="links">LINKS:</h4>
<p>16-08-2024-08:49</p>
<hr>
<p>[[]]</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Automation of Pull Requests</title>
      <link>http://localhost:52531/zet/articles/automationofthepr/</link>
      <pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:52531/zet/articles/automationofthepr/</guid>
      <description>Automation Process One of my projects was to create an automation process to build a Web App when a PR is created.
Anyone with access to the Repo can easily build the WebApp for their Use Case, for example to quickly build a webpage with something for an individual client. No need to come to a Developer and say we need this and the developer will spend time to prepare the thing.</description>
      <content:encoded><![CDATA[<h3 id="automation-process">Automation Process</h3>
<p>One of my projects was to create an automation process to build a Web App when a PR is created.</p>
<p>Anyone with access to the Repo can easily build the WebApp for their Use Case, for example to quickly build a webpage with something for an individual client. No need to come to a Developer and say we need this and the developer will spend time to prepare the thing. The Web App should be like a template for users.</p>
<p>I have prepared an environment which needs to be built if the solution is needed. So imagine Franta Flinta needs a web app which can be shown in a presentation.</p>
<p>He will come to GitHub and he will create a PR request. He puts a label &ldquo;Create Environment&rdquo; there and the magic starts.</p>
<h3 id="pipeline-workflow">Pipeline Workflow</h3>
<p>Choosing the label &ldquo;Create Environment&rdquo;, triggers the pipeline. The Pipeline is creating the whole process.</p>
<ul>
<li>Building the ACR image</li>
<li>Creating the App Service Plan</li>
<li>Creating the Web App</li>
<li>Assigning Managed Identity</li>
<li>Assigning AcrPull Role</li>
<li>Setting env variables</li>
<li>Restarting the Web App</li>
</ul>
<p>Web App In the repo we have the code and Dockerfile prepared.</p>
<p>It&rsquo;s the same with closing PR. If you unlabeled the label or close the PR, there is another Pipeline which destroys everything that was built.</p>
<p>You&rsquo;re now thinking how the user will get the address back to the GitHub repo?
We are using just webhooks and the webhook payload can be accessed in the Pipeline. So we are checking the number.</p>
<p>The number references the issue/PR and then we know where we need to send the comments.
So after correct steps we always inform the user about the process of the solution.</p>
<h3 id="solution">Solution</h3>
<p><img loading="lazy" src="/Autoamtion.png" type="" alt=""  /></p>
<h3 id="improvements">Improvements?</h3>
<p>Yes, there are, and these are everywhere.</p>
<p>What I want to do is to create an action to check how long the Web App has been up, so we can remove it after a certain time period and save money.
Also, there can be some field in the PR which can be extracted in the Pipeline, and the Pipeline will assign the variable into the Code.
Lastly, what I&rsquo;m thinking is to get info to the user if something bad happened during the creation of the solution.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
